//-------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
//-------------------------------------------------------------------------
import { Component, Input, Injector } from "@angular/core";
import { MapboxViewApi } from 'nativescript-mapbox';
import { CollectionDataService } from '@src/app/core/data/collection-data.service';
import { ActivatedRoute } from '@angular/router';
import { ExtendedNavigationExtras } from 'nativescript-angular/router/router-extensions';
import { NavigationService } from '@src/app/core/services/navigation.service';
import { StringUtilsService } from "@src/app/core/services/string-utils.service";

@Component({
    selector: "ks-mapbox",
    templateUrl: "./mapbox.component.html"
})
export class KSMapbox {
    private mapView: MapboxViewApi;
    private activatedRoute: ActivatedRoute;
    private navigationService: NavigationService;
    private stringUtilsService: StringUtilsService;

    @Input() public accessToken: string;
    @Input() public latitude: string;
    @Input() public longitude: string;
    @Input() public showUserLocation: boolean;
    @Input() public zoomLevel: number; 
    @Input() public dataService: CollectionDataService<any>;
    @Input() public config: {
        marker: {
            title: string;
            subtitle: string;
            navigateTo?: {
                allowBackNavigation: boolean;
                module?: string;
                view?: string;
            }
        }
    };

    constructor(public injector: Injector) {
        this.activatedRoute = injector.get(ActivatedRoute);
        this.navigationService = injector.get(NavigationService);
        this.stringUtilsService = injector.get(StringUtilsService);
    }

	onMapReady(args) {
        this.mapView = args.map;

        if(!this.latitude || !this.longitude && this.showUserLocation) {
            this.mapView.getUserLocation().then(({ location }) => this.mapView.setCenter(location))
        }

        if(this.dataService) {
            this.dataService.dataChanges.subscribe(changes => this.mapView.addMarkers(changes.map(item => this.createMarker(item))));
        }
    }

    private createMarker(item: any) {
        const title = this.stringUtilsService.interpolate(this.config.marker.title, { item });
        const subtitle = this.stringUtilsService.interpolate(this.config.marker.subtitle, { item });
        const navigateTo = this.config.marker.navigateTo;
        const [ lng, lat ] = item._geoloc;

        return {
          id: item._id,
          lng: lng,
          lat: lat,
          title,
          subtitle,
          onCalloutTap: () => {
              if (!navigateTo) {
                  return;
              }

              const command = [navigateTo.module, navigateTo.view];
              const extras: ExtendedNavigationExtras = {
                  relativeTo: this.activatedRoute,
                  queryParams: {
                      [this.dataService.queryIdParam]: item._id
                  },
                  clearHistory: !navigateTo.allowBackNavigation
              };
              const preserveQueryParams = true;

              return this.navigationService.navigate(command, extras, preserveQueryParams);
          }
        };
    }
} 