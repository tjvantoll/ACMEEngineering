//-------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
//-------------------------------------------------------------------------
import { Directive, OnInit, ElementRef, OnDestroy } from '@angular/core';
import { ActionItem, NavigationButton } from 'tns-core-modules/ui/action-bar/action-bar';
import { ActivatedRoute, Router } from '@angular/router';
import { isAndroid } from 'tns-core-modules/platform';
import { Page } from 'tns-core-modules/ui/page';
import * as app from 'tns-core-modules/application/application';
import { NavigationService } from '@src/app/core/services/navigation.service';
import { SideDrawerService } from '@src/app/core/services/side-drawer.service';
import { Button } from 'tns-core-modules/ui/button';
import * as appCommon from 'tns-core-modules/application/application-common';

@Directive({
    // tslint:disable-next-line
    selector: 'ActionBar'
})
export class ActionBarControllerDirective implements OnInit, OnDestroy {
    private onDestroyActions: Function[] = [];

    constructor(
        private el: ElementRef,
        private page: Page,
        private router: Router,
        private activatedRoute: ActivatedRoute,
        private navigationService: NavigationService,
        private sideDrawerService: SideDrawerService
    ) {
        if (isAndroid) {
            appCommon.on('livesync', () => setTimeout(this.onCssChanged.bind(this), 100));
        }
    }

    ngOnInit(): void {
        this.page.actionBarHidden = false;
        this.setupAndroidBackPress();

        if (this.canGoBack()) {
            this.addNavButton();
            return;
        }

        this.addSideButton();
    }

    ngOnDestroy() {
        this.onDestroyActions.forEach(action => action());
        this.onDestroyActions = [];
    }

    private addNavButton() {
        let backButton = new NavigationButton();
        this.page.actionBar.navigationButton = backButton;

        if (isAndroid) {
            backButton.android.systemIcon = 'ic_menu_back';
        } else {
            this.page.actionBar.navigationButton.visibility = 'collapsed';

            backButton = new ActionItem();
            backButton.text = `${String.fromCharCode(0x2770)} Back`;

            this.page.actionBar.actionItems.addItem(backButton);
        }

        backButton.on('tap', () => this.goBack());
    }

    private addSideButton() {
        if (!this.sideDrawerService.isEnabled) {
            return;
        }

        const actionBar = this.el.nativeElement;

        let btn: any;
        let navButton = new NavigationButton();

        actionBar.navigationButton = navButton;

        if (isAndroid) {
            navButton.icon = 'res://menu';

            actionBar.once('loaded', this.onCssChanged.bind(this));
        } else {
            actionBar.navigationButton.visibility = 'collapsed';

            navButton = new ActionItem();
            navButton.ios.position = 'left';

            btn = new Button();
            btn.text = String.fromCharCode(0xf0c9);
            btn.style.fontSize = 18;
            btn.className = 'fa';

            navButton.actionView = btn;
            actionBar.actionItems.addItem(navButton);
        }

        navButton.on('tap', () => this.sideDrawerService.open());
    }

    private onCssChanged() {
        if (!this.page.actionBar.nativeView) {
            return;
        }

        const color = this.page.actionBar.style.color;

        if (color) {
            const navigationIcon = this.page.actionBar.nativeView.getNavigationIcon();

            navigationIcon.setColorFilter(null);
            navigationIcon.setColorFilter(global.android.graphics.Color.parseColor(color && color.hex),
                global.android.graphics.PorterDuff.Mode.SRC_ATOP);
        }
    }

    private canGoBack(activatedRoute: ActivatedRoute = this.activatedRoute) {
        return this.navigationService.canGoBack(activatedRoute);
    }

    private goBack(activatedRoute: ActivatedRoute = this.activatedRoute) {
        return this.navigationService.goBack(activatedRoute);
    }

    private setupAndroidBackPress(): void {
        if (!isAndroid) {
            return;
        }

        const activatedRoutePath = this.activatedRoute.snapshot.pathFromRoot.map(x => x.url[0]).join('/');
        const backPressedHandler = (args: any) => {
            args.cancel = true;

            if (activatedRoutePath !== this.router.url) {
                return;
            }

            if (this.canGoBack()) {
                this.goBack();
            }
        };

        app.android.on(app.AndroidApplication.activityBackPressedEvent, backPressedHandler);
        this.onDestroyActions.push(() => {
            app.android.off(app.AndroidApplication.activityBackPressedEvent, backPressedHandler);
        });
    }
}
