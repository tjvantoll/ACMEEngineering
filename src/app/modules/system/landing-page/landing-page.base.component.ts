//-------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// You can write your custom code in the landing-page.component.ts file instead.
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
//-------------------------------------------------------------------------
import { Component, OnInit, AfterViewInit, OnDestroy, Injector } from '@angular/core';
import { TranslationsProvider } from '@src/app/core/translations.provider';
import { AuthorizationService } from '@src/app/core/auth/authorization.service';

@Component({
    templateUrl: './landing-page.component.html',
    styleUrls: ['./landing-page.component.css']
})
export class LandingPageViewBaseComponent implements OnInit, AfterViewInit, OnDestroy {
    public authorizationService: AuthorizationService;

    public modules = [
        {
            description: '',
            thumbnail: {
                background: '#00a2e8',
                color: '#ffffff',
                icon: 'fa-area-chart'
            },
            label: '',
            labelKey: 'modules.Tickets.label',
            name: 'Tickets',
            url: 'tickets',
            children: [] as View[]
        }
    ];

    constructor(public injector: Injector) {
        this.authorizationService = this.injector.get(AuthorizationService);

        this.filterModules();

        const translationsProvider = this.injector.get(TranslationsProvider);
        translationsProvider.useDefaultLanguage();
    }

    public ngOnInit(): void {
        this['onInit']();
    }

    public ngAfterViewInit(): void {
        this['onShow']();
    }

    public ngOnDestroy(): void {
        this['onHide']();
    }

    private filterModules(): void {
        this.modules.forEach(module => {
            module.children = module.children.filter(view => this.authorizationService.isAuthorized(view.authorization));
        });

        this.modules = this.modules.filter(m => m.children.length);
    }
}

interface View {
    name: string;
    routerLink: string;
    authorization: {
        allowedRoles: any[];
    };
}
