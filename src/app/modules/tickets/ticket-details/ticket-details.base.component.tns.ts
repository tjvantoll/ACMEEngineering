//-------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// You can write your custom code in the ticket-details.component.tns.ts file instead.
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
//-------------------------------------------------------------------------
import { Component, Injector, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import {
    KSFormComponent,
    FormControlOptions,
    getDefaultValidationMessages,
    getDefaultControlOptions
} from '@src/app/shared/components/mobile-form/form.component';
import { Page } from 'tns-core-modules/ui/page';
import { GestureTypes, SwipeDirection, SwipeGestureEventData } from 'tns-core-modules/ui/gestures';
import { ActivatedRoute } from '@angular/router';

import { NavigationService } from '@src/app/core/services/navigation.service';
import { UtilsService } from '@src/app/core/services/utils.service';
import { DataServiceFactory, DataServiceFactoryOptions } from '@src/app/core/data/data-service.factory';
import { Kinvey } from 'kinvey-nativescript-sdk';
import { EntityDataService } from '@src/app/core/data/entity-data.service';
import { Ticket } from '@src/app/data/ticket.model';
import { getTicketConfig } from '@src/app/data/ticket.config';
import { mapRouterParamsToEntityState } from '@src/app/core/data/state/utils';

@Component({
    templateUrl: './ticket-details.component.html',
    styleUrls: ['./ticket-details.component.css']
})
export class TicketDetailsViewBaseComponent implements OnInit {
    public config = {
        mobilemapbox0: {
            id: 'mobilemapbox0',
            marker: {
                title: 'Yo',
                subtitle: 'Yo',
                navigateTo: {
                    allowBackNavigation: true
                }
            }
        },
        mobileform0: {
            validationMessages: getDefaultValidationMessages(),
            groups: {
                ticketsFormGroup: {
                    Status: getDefaultControlOptions('')
                }
            }
        }
    };

    public ticketsService: EntityDataService<Ticket>;

    protected activatedRoute: ActivatedRoute;
    protected navigationService: NavigationService;
    protected utilsService: UtilsService;
    protected serviceFactory: DataServiceFactory;
    protected page: Page;

    public formBuilder: FormBuilder;
    public ticketsFormGroup: FormGroup;

    constructor(public injector: Injector) {
        this.page = injector.get(Page);

        this.formBuilder = injector.get(FormBuilder);
        this.activatedRoute = injector.get(ActivatedRoute);
        this.navigationService = injector.get(NavigationService);
        this.utilsService = injector.get(UtilsService);
        this.serviceFactory = injector.get(DataServiceFactory);
        this.initDataServices(this.getDataServiceOptions());

        this.page.enableSwipeBackNavigation = false;
    }

    ngOnInit() {
        this.initFormGroups();
    }

    onViewLoaded({ object: view }) {
        if (view.swipeBound) {
            return;
        }

        const swipeHandler = ({ direction }: SwipeGestureEventData) => {
            if (direction === SwipeDirection.right) {
                this.navigationService.goBack(this.activatedRoute);
                return;
            }
        };

        view.on(GestureTypes.swipe, swipeHandler);
        view.swipeBound = true;
    }

    protected getDataServiceOptions(): { [key: string]: DataServiceFactoryOptions<any> } {
        const ticketsOptions = {
            config: getTicketConfig()
        };
        ticketsOptions.config.dataStoreType = Kinvey.DataStoreType.Cache;

        return { tickets: ticketsOptions };
    }

    protected initDataServices(options: { [key: string]: DataServiceFactoryOptions<any> }) {
        this.ticketsService = this.serviceFactory.entity<Ticket>(options.tickets);

        this.ticketsService.dataState.onChanges(
            mapRouterParamsToEntityState(this.activatedRoute.queryParams, this.ticketsService.queryIdParam)
        );
    }

    protected initFormGroups() {
        let ticketsFormGroupConfig = this.config.mobileform0.groups.ticketsFormGroup;

        this.ticketsFormGroup = this.formBuilder.group({
            Status: [ticketsFormGroupConfig.Status.initial, ticketsFormGroupConfig.Status]
        });
    }
}
