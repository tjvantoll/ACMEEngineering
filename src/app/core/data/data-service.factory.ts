//-------------------------------------------------------------------------
// <Auto-generated file - do not modify!>
//
// This code was generated automatically by Kinvey Studio.
//
// Changes to this file may cause undesired behavior and will be lost
// the next time the code regenerates.
//
// Find more information on https://devcenter.kinvey.com/guides/studio-extension-points.
//-------------------------------------------------------------------------
import { Injectable, Injector } from '@angular/core';

import { Observable } from 'rxjs';

import { ErrorHandlingService } from '@src/app/core/error-handling.service';
import { BaseDataService } from '@src/app/core/data/base-data.service';
import { DataServiceConfig } from '@src/app/core/data/data-service-config';
import { AggregationDataService } from '@src/app/core/data/aggregation-data.service';
import { CollectionDataService } from '@src/app/core/data/collection-data.service';
import { EntityDataService } from '@src/app/core/data/entity-data.service';
import { KinveyServiceConfig } from '@src/app/core/data/kinvey-service-config';
import { AggregationState } from '@src/app/core/data/state/aggregation-state.interface';
import { CollectionState } from '@src/app/core/data/state/collection-state.interface';
import { EntityState } from '@src/app/core/data/state/entity-state.interface';

export interface DataServiceFactoryOptions<TState> {
    config: KinveyServiceConfig;
    initialState?: TState;
    onStateChanges?: () => Observable<TState>;
    customErrorHandling?: boolean;
}

@Injectable()
export class DataServiceFactory {
    constructor(protected injector: Injector, protected errorHandlingService: ErrorHandlingService) {}

    public collection<T>(options: DataServiceFactoryOptions<CollectionState>): CollectionDataService<T> {
        if (options.initialState) {
            options.initialState.take = options.initialState.take || options.config.pageSize;
        }

        const service = new CollectionDataService<T>(this.injector, options.config, options.initialState);
        this.initService(service, options);
        return service;
    }

    public entity<T>(options: DataServiceFactoryOptions<EntityState>): EntityDataService<T> {
        const service = new EntityDataService<T>(this.injector, options.config, options.initialState);
        this.initService(service, options);
        return service;
    }

    public aggregation(options: DataServiceFactoryOptions<AggregationState>): AggregationDataService  {
        const service = new AggregationDataService(this.injector, options.config, options.initialState);
        this.initService(service, options);
        return service;
    }

    protected initService(service: BaseDataService<any, DataServiceConfig, any>, { customErrorHandling }: DataServiceFactoryOptions<any>) {
        if (!customErrorHandling) {
            this.errorHandlingService.subscribe(service.errors);
        }
    }
}
